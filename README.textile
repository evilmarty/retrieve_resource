Tired of repeatedly writing get methods for your resources? Then you need...

h1. Retrieve Resource!

Same yourself from carpal tunnel and other programming ailments when writing methods to fetch your resources.

What use to be this:
<pre>class PeopleController < ApplicationController
  def get_person
    person = Person.find(params[:id])
  end
end</pre>
is now this:
<pre>class PeopleController < ApplicationController
  retrieve_resource :person
end</pre>

Have multiple resources? Then declare multiple retrievals:

<pre>class CommentsController < ApplicationController
  retrieve_resource :person, :param => :person_id
  retrieve_resource :comment, :only => [:show, :edit, :update, :destroy]
end</pre>

h2. How does it work?

Tell @retrieve_resource@ the name of the resource you want to load and it will load it. Based on the name specified it will get the name of your model and perform a find operation with the parameter from the request. But this baby allows you to have full control, just look at the options:

* *class_name* - The name of the class if it cannot be inflected from the name passed.
* *param* - The parameter passed to load the model. This defaults to {name}_id or {id} if the name is inflected of the controller name.
* *find_method* - Default is _find_ but you can use another method. The argument passed is that from *params*

You can also filter when a retrieval will be triggered. Even when a particular action occurs or when it doesn't occur, just like like Filters:http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html
* *only* - Specify which actions to retrieve on
* *except* - Specify which actions should not be retrieved on

You can also pass in a block to evaluate whether retrieval should occur.

h3. Example

<pre>class ManagerController < ApplicationController
  retrieve_resource :person, :class_name => 'Person', :param => :id, :find_method => :find_if_manager
end</pre>

h2. Versatility

Sometimes you may have a situation where you need even more control over what gets retrieved and how. Thats when you override the retrieval method and do your own magic. There are two ways you can do this, either on the parameter level or on the class level.

<pre>class CommentsController < ApplicationController
  retrieve_resource :person, :param => :person_id
  retrieve_resource :comment, :only => [:show, :edit, :update, :destroy]
protected
  def retrieve_resource_by_class_comment(value)
    @person.comments.find(value)
  end
end</pre>

In this example we declared the method @retrieve_resource_by_class_comment@, where _comment_ is the name of the class of the object. Simply return the record and retrieve_resource will set the correct instance variable for you. You can also override by parameter reference like so @retrieve_resource_by_param_id@, where _id_ is the parameter is that passed into @options["param"]@ (see *param* option above). 

h2. Macro?

Yes, retrieve_resource simply is a macro for you. This is what the plugin would look like:

<pre>class PeopleController < ApplicationController
  before_filter :retrieve_resource_person_filter, :only => [:show, :edit, :update, :destroy]
  
protected
  def retrieve_resource_by_class_person(value)
    Person.find(value)
  end

  def retrieve_resource_by_param_id
    retrieve_resource_by_class_person(params[:id])
  end

  def retrieve_resource_person_filter
    @person ||= retrieve_resource_by_param_id
  end
end</pre>

Wow, all that in one little line of code? That's amazing I know!

h2. TODO

Put more of the processing code into the filter and not create a separate method/

h2. Copyright

Copyright (c) 2009 Marty Zalega, released under the MIT license